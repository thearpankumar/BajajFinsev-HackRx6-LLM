name: CI/CD Pipeline (Docker Compose)

on:
  push:
    branches:
      - master

env:
  DOCKER_IMAGE_NAME: arpankumar1119/bajajfinsev-fastapi
  VM_HOST: 74.225.254.124
  VM_USER: azureuser

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Ruff Linter
      run: ruff check .

    - name: Run Pytest
      run: |
        export PYTHONPATH=$GITHUB_WORKSPACE/src
        pytest src/tests/

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push FastAPI Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
        docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Build and push Nginx Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}-nginx:latest ./config/nginx
        docker push ${{ env.DOCKER_IMAGE_NAME }}-nginx:latest

    - name: Deploy to VM via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.VM_HOST }}
        username: ${{ env.VM_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Navigate to the project directory
          cd ~/BajajFinsev-HackRx6-LLM

          # Pull the latest code from the repository
          git pull origin master

          # Create dummy certificate and directories if they don't exist
          if [ ! -f "./data/certbot/conf/live/llmnow.dev/privkey.pem" ]; then
            mkdir -p ./data/certbot/conf/live/llmnow.dev
            openssl req -x509 -nodes -days 1 -newkey rsa:2048 \
              -keyout ./data/certbot/conf/live/llmnow.dev/privkey.pem \
              -out ./data/certbot/conf/live/llmnow.dev/fullchain.pem \
              -subj "/CN=localhost"
          fi

          # Create the directory for the ACME challenge if it doesn't exist
          mkdir -p ./data/certbot/www/.well-known/acme-challenge

          # Start Nginx temporarily for the Let's Encrypt challenge
          docker compose up -d nginx

          # Obtain the real SSL certificate if it doesn't exist
          if [ ! -f "./data/certbot/conf/live/llmnow.dev/fullchain.pem" ]; then
            docker compose run --rm certbot certonly --webroot --webroot-path=/var/www/certbot \
              --email your-email@example.com --agree-tos --no-eff-email \
              -d llmnow.dev
          fi

          # Reload Nginx to use the new certificate
          docker compose exec nginx nginx -s reload

          # Start all services
          docker compose up -d --build
